"use client";

import { useState } from "react";

interface Vulnerability {
  id: string;
  name: string;
  severity: "critical" | "high" | "medium" | "low";
  description: string;
  file: string;
  line: number;
  code: string;
  match: string;
  recommendation: string;
  confidence: string;
  source?: "static" | "llm" | "enhanced";
}

interface VulnerabilityPanelProps {
  vulnerabilities: Vulnerability[];
}

export default function VulnerabilityPanel({ vulnerabilities }: VulnerabilityPanelProps) {
  const [selectedSeverity, setSelectedSeverity] = useState<string>("all");
  const [expandedVuln, setExpandedVuln] = useState<string | null>(null);

  const filteredVulnerabilities = vulnerabilities.filter(vuln => 
    selectedSeverity === "all" || vuln.severity === selectedSeverity
  );

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "bg-red-200 dark:bg-red-900 text-red-900 dark:text-red-200 border-red-300 dark:border-red-700";
      case "high":
        return "bg-red-100 dark:bg-red-800 text-red-800 dark:text-red-200 border-red-200 dark:border-red-600";
      case "medium":
        return "bg-yellow-100 dark:bg-yellow-800 text-yellow-800 dark:text-yellow-200 border-yellow-200 dark:border-yellow-600";
      case "low":
        return "bg-blue-100 dark:bg-blue-800 text-blue-800 dark:text-blue-200 border-blue-200 dark:border-blue-600";
      default:
        return "bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 border-gray-200 dark:border-gray-600";
    }
  };

  const getSourceColor = (source: string) => {
    switch (source) {
      case "llm":
        return "bg-purple-100 dark:bg-purple-800 text-purple-800 dark:text-purple-200 border-purple-200 dark:border-purple-600";
      case "static":
        return "bg-green-100 dark:bg-green-800 text-green-800 dark:text-green-200 border-green-200 dark:border-green-600";
      case "enhanced":
        return "bg-indigo-100 dark:bg-indigo-800 text-indigo-800 dark:text-indigo-200 border-indigo-200 dark:border-indigo-600";
      default:
        return "bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 border-gray-200 dark:border-gray-600";
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "critical":
        return (
          <svg className="w-5 h-5 text-red-600" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
          </svg>
        );
      case "high":
        return (
          <svg className="w-5 h-5 text-red-500" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
          </svg>
        );
      case "medium":
        return (
          <svg className="w-5 h-5 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
          </svg>
        );
      case "low":
        return (
          <svg className="w-5 h-5 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
          </svg>
        );
      default:
        return null;
    }
  };

  const getConfidenceColor = (confidence: string) => {
    switch (confidence.toLowerCase()) {
      case "high":
        return "text-red-600";
      case "medium":
        return "text-yellow-600";
      case "low":
        return "text-blue-600";
      default:
        return "text-gray-600";
    }
  };

  if (vulnerabilities.length === 0) {
    return (
      <div className="text-center py-12">
        <svg className="mx-auto h-16 w-16 text-green-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
          No Vulnerabilities Found
        </h3>
        <p className="text-gray-500 dark:text-gray-400">
          Great! No security issues were detected in your smart contract.
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header and Filters */}
      <div className="flex justify-between items-center">
        <div>
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
            Security Analysis Report
          </h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
            Found {vulnerabilities.length} potential security issue{vulnerabilities.length !== 1 ? 's' : ''}
          </p>
        </div>
        
        {/* Severity Filter */}
        <div className="flex space-x-2">
          {["all", "critical", "high", "medium", "low"].map((severity) => (
            <button
              key={severity}
              onClick={() => setSelectedSeverity(severity)}
              className={`px-3 py-1 text-xs font-medium rounded-full transition-colors ${
                selectedSeverity === severity
                  ? "bg-blue-100 dark:bg-blue-900/50 text-blue-800 dark:text-blue-200"
                  : "bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700"
              }`}
            >
              {severity === "all" ? "All" : severity.charAt(0).toUpperCase() + severity.slice(1)}
              {severity !== "all" && (
                <span className="ml-1">
                  ({vulnerabilities.filter(v => v.severity === severity).length})
                </span>
              )}
            </button>
          ))}
        </div>
      </div>

      {/* Summary Stats */}
      <div className="grid grid-cols-4 gap-3">
        {["critical", "high", "medium", "low"].map((severity) => {
          const count = vulnerabilities.filter(v => v.severity === severity).length;
          return (
            <div key={severity} className={`p-3 rounded-lg border ${getSeverityColor(severity)}`}>
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-xs font-medium capitalize">{severity} Risk</p>
                  <p className="text-xl font-bold">{count}</p>
                </div>
                {getSeverityIcon(severity)}
              </div>
            </div>
          );
        })}
      </div>

      {/* Vulnerability List */}
      <div className="space-y-4">
        {filteredVulnerabilities.map((vuln, index) => (
          <div
            key={`${vuln.id}-${index}`}
            className="border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden hover:shadow-md dark:hover:shadow-gray-900/20 transition-shadow bg-white dark:bg-gray-800"
          >
            <div
              className="p-4 cursor-pointer"
              onClick={() => setExpandedVuln(expandedVuln === `${vuln.id}-${index}` ? null : `${vuln.id}-${index}`)}
            >
              <div className="flex items-start justify-between">
                <div className="flex items-start space-x-3 flex-1">
                  {getSeverityIcon(vuln.severity)}
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 flex-wrap">
                      <h4 className="text-sm font-semibold text-gray-900 dark:text-white">
                        {vuln.name}
                      </h4>
                      <span className={`px-2 py-1 text-xs font-medium rounded-full border ${getSeverityColor(vuln.severity)}`}>
                        {vuln.severity.toUpperCase()}
                      </span>
                      {vuln.source && (
                        <span className={`px-2 py-1 text-xs font-medium rounded-full border ${getSourceColor(vuln.source)}`}>
                          {vuln.source === 'llm' ? '🤖 AI' : vuln.source === 'static' ? '📊 Static' : '🔍 Enhanced'}
                        </span>
                      )}
                    </div>
                    <p className="text-sm text-gray-600 dark:text-gray-300 mt-1">
                      {vuln.description}
                    </p>
                    <div className="flex items-center space-x-4 mt-2 text-xs text-gray-500 dark:text-gray-400">
                      <span>📁 {vuln.file}</span>
                      <span>📍 Line {vuln.line}</span>
                      <span className={`font-medium ${getConfidenceColor(vuln.confidence)}`}>
                        {vuln.confidence} confidence
                      </span>
                    </div>
                  </div>
                </div>
                <svg
                  className={`w-5 h-5 text-gray-400 transition-transform ${
                    expandedVuln === `${vuln.id}-${index}` ? "rotate-180" : ""
                  }`}
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </div>
            </div>

            {/* Expanded Details */}
            {expandedVuln === `${vuln.id}-${index}` && (
              <div className="border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-900/50 p-4 space-y-4">
                {/* Code Context */}
                <div>
                  <h5 className="text-sm font-medium text-gray-900 dark:text-white mb-2">Code Context:</h5>
                  <div className="bg-gray-900 text-green-400 p-3 rounded-md font-mono text-xs overflow-x-auto">
                    <div className="text-gray-500">{vuln.file}:{vuln.line}</div>
                    <div className="mt-1">{vuln.code}</div>
                    {vuln.match && vuln.match !== vuln.code && (
                      <div className="mt-1 text-yellow-400">
                        ▶ Matched: {vuln.match}
                      </div>
                    )}
                  </div>
                </div>

                {/* Recommendation */}
                <div>
                  <h5 className="text-sm font-medium text-gray-900 dark:text-white mb-2">💡 Recommendation:</h5>
                  <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800/50 rounded-md p-3">
                    <p className="text-sm text-blue-800 dark:text-blue-200">{vuln.recommendation}</p>
                  </div>
                </div>

                {/* Additional Details */}
                <div className="grid grid-cols-2 gap-4 pt-2 border-t border-gray-200 dark:border-gray-700">
                  <div>
                    <span className="text-xs font-medium text-gray-700 dark:text-gray-300">Rule ID:</span>
                    <p className="text-xs text-gray-600 dark:text-gray-400 font-mono">{vuln.id}</p>
                  </div>
                  <div>
                    <span className="text-xs font-medium text-gray-700 dark:text-gray-300">Detection Confidence:</span>
                    <p className={`text-xs font-medium ${getConfidenceColor(vuln.confidence)}`}>
                      {vuln.confidence.charAt(0).toUpperCase() + vuln.confidence.slice(1)}
                    </p>
                  </div>
                </div>
              </div>
            )}
          </div>
        ))}
      </div>

      {filteredVulnerabilities.length === 0 && selectedSeverity !== "all" && (
        <div className="text-center py-8">
          <p className="text-gray-500 dark:text-gray-400">No {selectedSeverity} severity vulnerabilities found.</p>
        </div>
      )}
    </div>
  );
}