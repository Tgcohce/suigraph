const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';

export async function uploadFiles(files: File[]): Promise<any> {
  const formData = new FormData();
  
  files.forEach((file, index) => {
    formData.append(`files`, file);
  });

  const response = await fetch(`${API_BASE_URL}/upload`, {
    method: 'POST',
    body: formData,
  });

  if (!response.ok) {
    throw new Error(`Upload failed: ${response.statusText}`);
  }

  const uploadResult = await response.json();
  
  // Now analyze the uploaded files
  const analyzeResponse = await fetch(`${API_BASE_URL}/analyze`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ fileIds: uploadResult.fileIds }),
  });

  if (!analyzeResponse.ok) {
    throw new Error(`Analysis failed: ${analyzeResponse.statusText}`);
  }

  return analyzeResponse.json();
}

export async function fetchContract(
  input: string, 
  type: 'url' | 'object' | 'package'
): Promise<any> {
  const response = await fetch(`${API_BASE_URL}/fetchContract`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ input, type }),
  });

  if (!response.ok) {
    throw new Error(`Contract fetch failed: ${response.statusText}`);
  }

  return response.json();
}

export async function analyzeCode(code: string, fileName?: string): Promise<any> {
  const response = await fetch(`${API_BASE_URL}/analyze`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ code, fileName }),
  });

  if (!response.ok) {
    throw new Error(`Analysis failed: ${response.statusText}`);
  }

  return response.json();
}

export async function generateReport(analysisData: any): Promise<string> {
  try {
    const response = await fetch(`${API_BASE_URL}/report`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(analysisData),
    });

    if (!response.ok) {
      throw new Error(`Report generation failed: ${response.statusText}`);
    }

    const result = await response.json();
    return result.reportContent;
  } catch (error) {
    // If backend report generation fails, generate client-side
    console.warn('Backend report generation failed, using client-side generation');
    return generateClientSideReport(analysisData);
  }
}

function generateClientSideReport(data: any): string {
  const timestamp = new Date().toISOString();
  const vulnerabilities = data.vulnerabilities || [];
  
  return `# SuiGraph Security Analysis Report

**Generated:** ${new Date(timestamp).toLocaleString()}

## Executive Summary
- **Modules:** ${data.modules?.length || 0}
- **Functions:** ${data.functions?.length || 0}
- **Vulnerabilities:** ${vulnerabilities.length}

${vulnerabilities.length > 0 ? vulnerabilities.map((v, i) => 
  `### ${i + 1}. ${v.name}\n**Severity:** ${v.severity}\n**File:** ${v.file}:${v.line}\n**Description:** ${v.description}\n**Recommendation:** ${v.recommendation}\n`
).join('\n') : 'No vulnerabilities found.'}

---
*Generated by SuiGraph*`;
}